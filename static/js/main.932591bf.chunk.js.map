{"version":3,"sources":["components/map.js","api/index.js","components/venues-list-item.js","components/venues-list.js","components/header.js","components/sidebar.js","components/app.js","service-worker.js","index.js"],"names":["MyMapComponent","withScriptjs","withGoogleMap","props","react_default","a","createElement","lib","zoom","defaultCenter","lat","lng","tabIndex","markers","filter","marker","isVisible","map","index","array","venueInfo","venues","find","venue","id","key","position","onClick","handleMarkerClick","animation","length","google","maps","Animation","DROP","aria-label","isOpen","react","name","className","bestPhoto","src","concat","prefix","suffix","alt","location","address","Map","Object","assign","this","isMarkerShown","googleMapURL","process","role","loadingElement","style","height","containerElement","width","mapElement","Component","Helper","keys","client_id","client_secret","v","join","searchParams","endpoint","fetch","baseURL","urlBuilder","auth","then","res","json","FoursquareAPI","VENUE_ID","basicFetch","VenuesListItem","_this","handleVenuesListItemClick","VenuesList","venues_list_item_VenuesListItem","Header","Sidebar","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleVenueSearch","state","query","trim","toLowerCase","includes","handleChange","e","setState","target","value","isMatched","updateMarkerState","Fragment","react_responsive_default","BurgerMenu","menuIsOpen","header_Header","type","placeholder","onChange","venues_list_VenuesList","App","closeAllMarkers","getVenueInfo","results","newVenue","response","obj","_this2","search","near","limit","console","log","catch","error","alert","sidebar_Sidebar","map_Map","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","app_App","document","getElementById","URL","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.932591bf.chunk.js","sourcesContent":["// Specifies global variable to ESLint (bundled with create-react-app), circumventing no-undef rule. See https://eslint.org/docs/user-guide/configuring#specifying-globals\r\n/* global google */\r\n// This component's code is from react-google-maps implementation instructions https://tomchentw.github.io/react-google-maps/#installation\r\n\r\nimport React, { Component, Fragment } from 'react';\r\nimport {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n  InfoWindow\r\n} from 'react-google-maps';\r\n\r\nconst MyMapComponent = withScriptjs(\r\n  withGoogleMap(props => (\r\n    <GoogleMap\r\n      zoom={props.zoom}\r\n      // Set to lat/long of Paramount Theatre\r\n      defaultCenter={{ lat: 47.6133, lng: -122.3313 }}\r\n      // Means that the element should be focusable in sequential keyboard navigation, but its order is defined by document's source order\r\n      tabIndex='0'\r\n    >\r\n      {/* If there are markers, filters all visible markers (creating new array) then maps over newly created array taking the marker and marker's array index as arguments, rendering each Marker component with the marker index set as the key and the marker's lat and long as the position */}\r\n      {props.markers &&\r\n        props.markers\r\n          .filter(marker => marker.isVisible)\r\n          // \"Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity ... When you don’t have stable IDs for rendered items, you may use the item index as a key as a last resort\" https://reactjs.org/docs/lists-and-keys.html\r\n          .map((marker, index, array) => {\r\n            // Returns value of first element in array that satisfies provided testing function. This returns data for venue whose ID matches marker ID\r\n            const venueInfo = props.venues.find(\r\n              venue => venue.id === marker.id\r\n            );\r\n            return (\r\n              <Marker\r\n                key={index}\r\n                tabIndex='0'\r\n                position={{ lat: marker.lat, lng: marker.lng }}\r\n                // Marker click event listener, defined in App component class\r\n                onClick={() => props.handleMarkerClick(marker)}\r\n                animation={array.length !== 1 && google.maps.Animation.DROP}\r\n                aria-label='marker'\r\n              >\r\n                {/* Show marker's InfoWindow when its isOpen state is set to true (set in app.js) */}\r\n                {marker.isOpen && (\r\n                  <InfoWindow aria-label='Venue info window'>\r\n                    {venueInfo ? (\r\n                      <Fragment>\r\n                        {/* Conditional renering inside info window based on props available, with fallback of null, which doesn't render anything */}\r\n                        {venueInfo.name ? (\r\n                          <p className='venue-name'>{venueInfo.name}</p>\r\n                        ) : null}\r\n                        {venueInfo.bestPhoto ? (\r\n                          <img\r\n                            src={`${venueInfo.bestPhoto.prefix}200x200${venueInfo.bestPhoto.suffix}`}\r\n                            alt={'Venue'}\r\n                          />\r\n                        ) : null}\r\n                        {venueInfo.location.address ? (\r\n                          <p>{`${venueInfo.location.address}`}</p>\r\n                        ) : null}\r\n                        <p className='attribution'>Powered by Foursquare</p>\r\n                      </Fragment>\r\n                    ) : (\r\n                      <p>Info unavailable</p>\r\n                    )}\r\n                  </InfoWindow>\r\n                )}\r\n              </Marker>\r\n            );\r\n          })}\r\n    </GoogleMap>\r\n  ))\r\n);\r\n\r\nexport default class Map extends Component {\r\n  render() {\r\n    return (\r\n      <MyMapComponent\r\n        // This is making the this.setState passed into Map component (as its prop) inside App's component class's render method available to MyMapComponent, which is how props from this.setState are eventually included inside MyMapComponent class (such as zoom={props.zoom})\r\n        {...this.props}\r\n        // Attributes without values are interpreted as Boolean true\r\n        isMarkerShown\r\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&key=${process.env.REACT_APP_MAPS_API_KEY}`}\r\n        role='application'\r\n        aria-label='map'\r\n        // CSS declarations are placed in double curly braces because attributes accept JS objects; this is how to include an object literal. See https://stackoverflow.com/questions/22671582/what-is-the-purpose-of-double-curly-braces-in-reacts-jsx-syntax\r\n        loadingElement={<div style={{ height: `100%` }} />}\r\n        containerElement={\r\n          <div\r\n            className='map-container'\r\n            style={{ height: `100%`, width: `75%` }}\r\n          />\r\n        }\r\n        mapElement={<div className='map-element' style={{ height: `100%` }} />}\r\n      />\r\n    );\r\n  }\r\n}\r\n","// This file is for including venue details with Foursquare Places API\r\n// API call guidelines https://developer.foursquare.com/docs/api\r\n\r\n// Items in this class are used to fill in fetch request\r\n// Format should be like: https://api.foursquare.com/v2/venues/search?ll=40.7,-74&client_id=CLIENT_ID&client_secret=CLIENT_SECRET&v=YYYYMMDD\r\nclass Helper {\r\n  static baseURL() {\r\n    return 'https://api.foursquare.com/v2';\r\n  }\r\n\r\n  // Userless authentication\r\n  static auth() {\r\n    const keys = {\r\n      client_id: '342ZVQQ0DRCMR2ERCT3OO0N3FUNZS0KPVQCYQVLW1AGUQ22R',\r\n      client_secret: 'TFERMLJWIHNHVDG421H1ATNIVMNCNCAZKTQXZB5QX2ZXP0HO',\r\n      v: '20181004'\r\n    };\r\n\r\n    // Object.keys() returns an array of a given object's own property names\r\n    return Object.keys(keys)\r\n      // .map() generates new array that is result of calling provided function on every element on calling array\r\n      // For each property name (key) of keys object in newly generated array, generating a string, in the format property name/key=[property value, accessed with bracket notation]\r\n      .map(key => `${key}=${keys[key]}`)\r\n      // Joins elements of array into a string, separated with whatever is passed in as argument. So output of auth() is like key=value&key=value&key=value\r\n      .join('&');\r\n  }\r\n\r\n  // Formatting venue search parameters (listed under \"Parameters\" in https://developer.foursquare.com/docs/api/venues/search) into format like name=MollyMoon&limit=10.\r\n  static urlBuilder(searchParams) {\r\n    if (!searchParams) {\r\n      return '';\r\n    }\r\n\r\n    // Object.keys() returns an array of a given object's (searchParams) own property names\r\n    return Object.keys(searchParams)\r\n    // .map() generates new array that is result of calling provided function on every element on calling array\r\n    // For each property name (key) of (searchParams) object in newly generated array, generating a string, in the format property name/key=[property value, accessed with bracket notation]\r\n      .map(key => `${key}=${searchParams[key]}`)\r\n      .join('&');\r\n  }\r\n\r\n  // endpoint: Foursquare's venue endpoints, which follows base URL, such as /venues/search. Also can include venue ID in case of getVenueInfo and getVenuePhotos (static methods on FoursquareAPI). Some listed in https://developer.foursquare.com/docs/api/venues/details. searchParams: venue parameters (such as 'near', 'intent', 'radius'), listed in https://developer.foursquare.com/docs/api/venues/search. Note that default fetch HTTP method is GET, so no need to specify this in the request\r\n  // Note: Verified credit card; I am in Foursquare's Personal Tier, allowing for about 10k Regular API Calls per day and 500 Premium API Calls per day\r\n  static basicFetch(endpoint, searchParams) {\r\n    // fetch() returns a promise, which resolves to response sent back from the server. Once promise resolves, then() used to convert response to json\r\n    return fetch(`${Helper.baseURL()}${endpoint}?${Helper.urlBuilder(searchParams)}&${Helper.auth()}`\r\n    // json() method of Fetch API's Body mixin takes server's response stream and reads it to completion, then returns a promise that resolves with result of parsing body text as JSON (it converts string received from server to a JSON object)\r\n    ).then(res => res.json());\r\n  }\r\n}\r\n\r\nexport default class FoursquareAPI {\r\n  static getVenueInfo(VENUE_ID) {\r\n    return Helper.basicFetch(`/venues/${VENUE_ID}`);\r\n  }\r\n\r\n  static search(searchParams) {\r\n    return Helper.basicFetch('/venues/search', searchParams);\r\n  }\r\n\r\n  static getVenuePhotos(VENUE_ID) {\r\n    return Helper.basicFetch(`/venues/${VENUE_ID}/photos`);\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\n// Rendered in VenuesList, which is rendered in Sidebar\r\nexport default class VenuesListItem extends Component {\r\n  render() {\r\n    return (\r\n        <li\r\n          className=\"venues-list-item\"\r\n          // Default is listitem. Using in conjunction with role of listitem\r\n          role=\"menuitem\"\r\n          // this.props is entire set of venue data spread out in rendering of VenuesListItem in VenuesList component class. handleVenuesListItemClick method is in app.js\r\n          onClick={() => this.props.handleVenuesListItemClick(this.props)}\r\n          tabIndex=\"3\"\r\n        >\r\n          {this.props.name}\r\n        </li>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport VenuesListItem from './venues-list-item';\r\n\r\nexport default class VenuesList extends Component {\r\n  render() {\r\n    return (\r\n      // Role of menu containing li with role of menuitem is used in W3C example https://www.w3.org/WAI/PF/aria/roles#tac_example1\r\n      <ul className=\"venues-list\" role=\"menu\">\r\n        {/* If there is venues props array, maps over that array, rendering list item with key set to index of each item in the array, and spreading/expanding venue props/details for that venue into the array. Returns new array with results, so you get a new array for each venue */}\r\n        {this.props.venues && this.props.venues.map((venue, index) => ( <VenuesListItem\r\n          key={index}\r\n          {...venue}\r\n          handleVenuesListItemClick={this.props.handleVenuesListItemClick}\r\n        />\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <h1 className=\"header\" role=\"banner\" tabIndex=\"1\">\r\n        Seattle Scoops\r\n      </h1>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport VenuesList from './venues-list';\r\nimport Header from './header';\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport MediaQuery from 'react-responsive';\r\n\r\nexport default class Sidebar extends Component {\r\n  // Called before component is mounted. Used for initializing local state with this.state and binding event handler methods to an instance\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      query: '',\r\n      venues: []\r\n    };\r\n  }\r\n\r\n  // For hiding venues list items that don't match query\r\n  handleVenueSearch = () => {\r\n    // If search with whitespace removed is not blank, sets venues (accessed from spreading of state in this component's rendering in App.js) to new array of venues filtered by venues with names that include search input, and returns that new venues array\r\n    if (this.state.query.trim() !== '') {\r\n      const venues = this.props.venues.filter(venue =>\r\n        venue.name.toLowerCase().includes(this.state.query.toLowerCase())\r\n      );\r\n      return venues;\r\n    }\r\n    // Return this if the query is a blank string\r\n    return this.props.venues;\r\n  };\r\n\r\n  handleChange = e => {\r\n    // Using object setState (rather than function setState) because new state does not depend on previous state\r\n    this.setState({ query: e.target.value });\r\n    // For hiding markers after something has been entered into search box. For each item in venues array (from spreading this.state in Sidebar component rendering in app.js), sets isMatched to search input that is at least part of the name of venue (both lowercase)\r\n    const markers = this.props.venues.map(venue => {\r\n      const isMatched = venue.name\r\n        .toLowerCase()\r\n        .includes(e.target.value.toLowerCase());\r\n      // find() returns value of first element in array that satisfies provided testing function. Otherwise undefined is returned\r\n      const marker = this.props.markers.find(marker => marker.id === venue.id);\r\n      // If search input matches at least partially a venue name, sets corresponding marker to visible, and hides markers for nonmatching venues\r\n      isMatched ? (marker.isVisible = true) : (marker.isVisible = false);\r\n      return marker;\r\n    });\r\n    // Using ES6 property shorthand. Method is in app.js. Only mutating isVisible\r\n    this.props.updateMarkerState({ markers });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <MediaQuery query=\"(max-device-width: 767px)\">\r\n          <Menu isOpen={this.props.menuIsOpen}>\r\n            <div className=\"sidebar\">\r\n              <Header />\r\n              <input\r\n                tabIndex=\"2\"\r\n                type=\"search\"\r\n                className=\"search\"\r\n                placeholder=\"Search...\"\r\n                onChange={this.handleChange}\r\n                role=\"search\"\r\n                aria-label=\"search\"\r\n              />\r\n              <VenuesList\r\n                // Making this component's props available in VenuesList\r\n                {...this.props}\r\n                venues={this.handleVenueSearch()}\r\n                // Method is in app.js\r\n                handleVenuesListItemClick={this.props.handleVenuesListItemClick}\r\n              />\r\n            </div>\r\n          </Menu>\r\n        </MediaQuery>\r\n        <MediaQuery query=\"(min-device-width: 768px)\">\r\n          <div className=\"sidebar\">\r\n            <Header />\r\n            <input\r\n              tabIndex=\"2\"\r\n              type=\"search\"\r\n              className=\"search\"\r\n              placeholder=\"Search...\"\r\n              onChange={this.handleChange}\r\n              role=\"search\"\r\n              aria-label=\"search\"\r\n            />\r\n            <VenuesList\r\n              // Making this component's props available in VenuesList\r\n              {...this.props}\r\n              venues={this.handleVenueSearch()}\r\n              // Method is in app.js\r\n              handleVenuesListItemClick={this.props.handleVenuesListItemClick}\r\n            />\r\n          </div>\r\n        </MediaQuery>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Map from './map.js';\r\nimport FoursquareAPI from '../api/index.js';\r\nimport Sidebar from './sidebar';\r\n\r\nexport default class App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      venues: [],\r\n      markers: [],\r\n      zoom: 14,\r\n      // For setting marker state (visibility) from sidebar (made available to sidebar from props)\r\n      updateMarkerState: obj => {\r\n        this.setState(obj);\r\n      },\r\n      menuIsOpen: false\r\n    };\r\n  }\r\n\r\n  handleMarkerClick = marker => {\r\n    this.closeAllMarkers();\r\n    marker.isOpen = true;\r\n    // Copies values of properties from marker (the source) to this.state.markers (the target). This is needed to update the state of clicked marker's new isOpen value of true\r\n    this.setState({\r\n      markers: Object.assign(this.state.markers, marker)\r\n    });\r\n    // find() method returns the value of the first element in the array that satisfies the provided testing function. So this searches the venues list held in state (see componentDidMount() method for how this is derived) until the venue matching the marker is located, and it returns it; the venue variable is that located venue\r\n    const venue = this.state.venues.find(venue => (venue.id = marker.id));\r\n    // Fetches data associated with clicked marker's ID\r\n    FoursquareAPI.getVenueInfo(marker.id).then(results => {\r\n      // Copies properties from results.response.venue (source) to venue (target). venue in results.response.venue is from venue variable created previously (with ID matching clicked marker's ID). Remember venue is venue from existing venues state whose ID matches that of clicked marker. This will be needed to update venues state with this info\r\n      const newVenue = Object.assign(venue, results.response.venue);\r\n      this.setState({\r\n        venues: Object.assign(this.state.venues, newVenue)\r\n      });\r\n    });\r\n  };\r\n\r\n  handleVenuesListItemClick = venue => {\r\n    this.setState({ menuIsOpen: false });\r\n    const marker = this.state.markers.find(marker => marker.id === venue.id);\r\n    this.handleMarkerClick(marker);\r\n  };\r\n\r\n  // Called when a marker is clicked. For closing previously clicked marker's infowindow (if applicable)\r\n  closeAllMarkers = () => {\r\n    // Returns new array that is result of setting each marker's isOpen value to false. Note that it doesn't close the newly clicked marker's infowindow because that marker's isOpen value is set to true immediately after this is called\r\n    const markers = this.state.markers.map(marker => {\r\n      marker.isOpen = false;\r\n      return marker;\r\n    });\r\n    this.setState({ markers: Object.assign(this.state.markers, markers) });\r\n  };\r\n\r\n  // Foursquare Places API fetch request testing and markers handling\r\n  componentDidMount() {\r\n    FoursquareAPI.search({\r\n      near: 'Seattle, WA',\r\n      query: 'ice cream',\r\n      limit: 50\r\n    })\r\n      .then(results => {\r\n        // Object destructuring assignment. Instead of using results.response.venues, this allows for using venues alone when referencing it. See https://wesbos.com/destructuring-objects/. This info will be used to update venues property\r\n        const { venues } = results.response;\r\n        // Returning info from each venue and storing it in new array. This info will be used to update markers property\r\n        const markers = venues.map(venue => {\r\n          return {\r\n            lat: venue.location.lat,\r\n            lng: venue.location.lng,\r\n            // For info windows (none should be open on page load)\r\n            isOpen: false,\r\n            // Sets all markers to visible on page load\r\n            isVisible: true,\r\n            id: venue.id\r\n          };\r\n        });\r\n        // Reminder: Use object setState whenever new state does not depend on its previous state (as opposed to functional setState)\r\n        this.setState({ venues, markers });\r\n        // Testing fetch request\r\n        console.log(results);\r\n      })\r\n      .catch(error => alert('Sorry, there was an error.'));\r\n  }\r\n\r\n  // For when Google Maps API doesn't load\r\n  // This lifecycle method is a feature of React 16 (released 2017). By using it, this component becomes an error boundary, that is, a component that catches a JS error and can log the error and/or display fallback UI. For more info see https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\r\n  componentDidCatch(error) {\r\n    alert('Sorry, there was an error.');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // Using role of main is alternative to using <main> HTML element. See https://www.scottohara.me/blog/2018/03/03/landmarks.html\r\n      <div className=\"app\" role=\"main\">\r\n        <Sidebar\r\n          {...this.state}\r\n          handleVenuesListItemClick={this.handleVenuesListItemClick}\r\n          menuIsOpen={this.state.menuIsOpen}\r\n        />\r\n        {/* Using spread syntax/operator to expand/insert state, making it available in rendered map component */}\r\n        <Map {...this.state} handleMarkerClick={this.handleMarkerClick} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app.css';\nimport App from './components/app';\nimport * as serviceWorker from './service-worker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}